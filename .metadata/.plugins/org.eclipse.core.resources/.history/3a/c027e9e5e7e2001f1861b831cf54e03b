package com.service;


import java.util.HashSet;



import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.exception.InvalidNameException;
import com.exception.UserAlreadyExists;
import com.model.Role;
import com.model.User;
import com.repository.RoleRepository;
import com.repository.UserRepository;

import jakarta.servlet.http.HttpServletRequest;


@Service
@Transactional
public class AuthService {
   
	private static final String EMAIL_REGEX = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$";
  
	 private static final Pattern EMAIL_PATTERN = Pattern.compile(EMAIL_REGEX);
	
    private final UserRepository userRepository;

  
    private final RoleRepository roleRepository;

  
    private PasswordEncoder passwordEncoder;

 
    private AuthenticationManager authenticationManager;


    private TokenService tokenService;
@Autowired
    public AuthService(UserRepository userRepository, RoleRepository roleRepository,
			PasswordEncoder passwordEncoder, AuthenticationManager authenticationManager, TokenService tokenService
			) {
		super();
		this.userRepository = userRepository;
		this.roleRepository = roleRepository;
		this.passwordEncoder = passwordEncoder;
		this.authenticationManager = authenticationManager;
		this.tokenService = tokenService;
		
	}

	public String registerUser(String username, String password){
         if(!isEmailValid(username))
         {
        	 throw new InvalidNameException("UserName Invalid ! ");
         }
    	// check if exists;
    	System.out.println("her ");
        String encodedPassword = passwordEncoder.encode(password);
        Role userRole = roleRepository.findByAuthority("USER").orElse(null);

        Set<Role> authorities = new HashSet<>();
      
        authorities.add(userRole);
        if(userRepository.existsByUsername(username))
        {
        	throw new UserAlreadyExists("Name is already exists ");
        }
        var userdetails= userRepository.save(new User(0, username, encodedPassword, authorities));
      // boolean isSent= sendCodeTomail(username);
        
      
            return "Account Created ! ";
    
      
        
	}
   
   

	
    private boolean isEmailValid(String email) {
		// TODO Auto-generated method stub
    	  if (email == null) {
              return false;
          }
          Matcher matcher = EMAIL_PATTERN.matcher(email);
          return matcher.matches();
	}

	public LoginResponseDTO loginUser(String username, String password){

        try{
        	  if(!isEmailValid(username))
              {
             	 throw new InvalidEmailException("Please enter valid email");
              }
        	System.out.println(" her login serivce");
        	var user=userRepository.findByUsergmail(username).orElse(null);
        	System.out.println(" her login serivce"+user);
        	if(user==null)
        		 throw new UserNotFoundException("Email does not  exists! ");
        	System.out.println("x " +user);
        	if(!user.getEnabled())
        		throw new UserNotVerfitedException("Account is not Activited Please Verfity Your Email!");
            Authentication auth = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(username, password)
            );
       
            String token = tokenService.generateJwt(auth);
             // userRepository.findByUsername(username).get()
            // raise unverify Exception;
             if(token==null)
             {
            	 //password mismatch
            	 throw new UserPasswordWrongException("Password is Wrong!");
            	 
             }
            return new LoginResponseDTO(userRepository.findByUsergmail(username).get(), token);

        } catch(AuthenticationException e){
        	throw new UserPasswordWrongException("Password is Wrong!");
        }
    }

}